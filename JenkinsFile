// Function to cancel previous builds to avoid resource contention
@NonCPS
def cancelPreviousBuilds() {
    def jobName = env.JOB_NAME
    def buildNumber = env.BUILD_NUMBER.toInteger()
    def currentJob = Jenkins.instance.getItemByFullName(jobName)

    for (def build : currentJob.builds) {
        def exec = build.getExecutor()
        if (build.isBuilding() && build.number.toInteger() != buildNumber && exec != null) {
            exec.interrupt(
                Result.ABORTED,
                new CauseOfInterruption.UserInterruption("Aborted by #${currentBuild.number}")
            )
            println("Aborted previously running build #${build.number}")
        }
    }
}

pipeline {
    // Using any available agent - consider specifying a label for more control
    agent any

    // Tool versions are explicitly defined
    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }

    // Sensitive credentials are properly managed using Jenkins credentials
    environment {
        AWS_CREDENTIALS = credentials('aws-credentials')
        MAIL_CREDENTIALS = credentials('mail-credentials')
        JWT_SECRET = credentials('jwt-secret')
        DB_CREDENTIALS = credentials('db-credentials')
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        DOCKER_IMAGE = "jathurt/myapp-backend"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init') {
            // Consider removing 'master' label for better agent flexibility
            agent { label 'master' }
            steps {
                script {
                    cancelPreviousBuilds()
                }
            }
        }

        stage('Build') {
            steps {
                // Good practice: timeout and retry mechanisms
                timeout(time: 20, unit: 'MINUTES') {
                    sh 'chmod +x mvnw'
                    retry(3) {
                        sh './mvnw clean package -DskipTests --no-transfer-progress'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                sh './mvnw test'
            }
            // Good practice: Always publish test results
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh './mvnw sonar:sonar'
                }
            }
        }

        stage('Prepare .env File') {
            steps {
                script {
                    // Security consideration: .env file is created and later cleaned up
                    sh '''
                    cat > .env << EOL
SPRING_APPLICATION_NAME=backend
SERVER_PORT=8081
SPRING_JPA_HIBERNATE_DDL_AUTO=update
SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dental
SPRING_DATASOURCE_USERNAME=${DB_CREDENTIALS_USR}
SPRING_DATASOURCE_PASSWORD=${DB_CREDENTIALS_PSW}
SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
SPRING_JPA_SHOW_SQL=false
APP_CORS_ALLOWED_ORIGINS=*
APP_RESET_PASSWORD_LINK=http://myapp.com/reset-password
SPRING_APP_JWTSECRET=${JWT_SECRET}
SPRING_APP_JWTEXPIRATIONMS=86400000
SPRING_APP_JWTCOOKIENAME=dn-dental-clinic
SPRING_MAIL_HOST=smtp.gmail.com
SPRING_MAIL_PORT=587
SPRING_MAIL_USERNAME=${MAIL_CREDENTIALS_USR}
SPRING_MAIL_PASSWORD=${MAIL_CREDENTIALS_PSW}
SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=true
SPRING_MAIL_PROPERTIES_MAIL_SMTP_CONNECTIONTIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_TIMEOUT=5000
SPRING_MAIL_PROPERTIES_MAIL_SMTP_WRITETIMEOUT=5000
AWS_ACCESSKEYID=${AWS_CREDENTIALS_USR}
AWS_SECRETKEY=${AWS_CREDENTIALS_PSW}
AWS_REGION=eu-north-1
AWS_S3_BUCKET=patient-logbook-photos
EOL
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // Good practice: Versioning both with build number and latest
                sh "docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} ."
                sh "docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Security: Proper Docker login/logout handling
                sh 'echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin'
                sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
                sh "docker push ${DOCKER_IMAGE}:latest"
            }
        }

        stage('Deploy to EC2') {
            steps {
                sshagent(['ec2-ssh-key']) {
                    // Consider using environment variables for the EC2 instance IP
                    sh '''
                        ssh -o StrictHostKeyChecking=no ec2-user@your-ec2-instance-ip '
                            docker pull ${DOCKER_IMAGE}:latest
                            docker-compose down
                            docker-compose up -d
                        '
                    '''
                }
            }
        }
    }

    // Good practice: Cleanup in post actions
    post {
        always {
            sh 'docker logout'
            sh 'rm -f .env'
            cleanWs()
        }
    }
}