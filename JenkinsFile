stage('Deploy to EC2') {
    steps {
        withEnv([
            "REMOTE_USER=${EC2_USER}",
            "REMOTE_HOST=${EC2_HOST}",
            "DOCKER_USERNAME=${DOCKER_CREDENTIALS_USR}",
            "DOCKER_PASSWORD=${DOCKER_CREDENTIALS_PSW}"
        ]) {
            sshagent(['ec2-ssh-key']) {
                sh '''#!/bin/bash
                    # Test SSH connection
                    echo "Testing SSH connection..."
                    ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "echo 'SSH connection successful'"

                    # Create deployment directory
                    echo "Creating deployment directory..."
                    ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "mkdir -p ~/app-deployment"

                    # Copy deployment files
                    echo "Copying deployment files..."
                    scp -o StrictHostKeyChecking=no docker-compose.yml .env $REMOTE_USER@$REMOTE_HOST:~/app-deployment/

                    # Execute deployment
                    echo "Starting deployment..."
                    ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST bash << 'ENDSSH'
                        cd ~/app-deployment

                        # Docker login using environment variables
                        echo "Logging into Docker Hub..."
                        echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin || {
                            echo "Docker login failed"
                            exit 1
                        }

                        # Stop existing containers
                        echo "Stopping existing containers..."
                        docker-compose down --remove-orphans || true

                        # Remove old containers and networks explicitly
                        echo "Cleaning up old resources..."
                        docker rm -f $(docker ps -a -q) 2>/dev/null || true
                        docker network prune -f || true

                        # Pull latest images
                        echo "Pulling latest images..."
                        docker-compose pull || {
                            echo "Failed to pull images"
                            exit 1
                        }

                        # Start containers
                        echo "Starting containers..."
                        docker-compose up -d || {
                            echo "Failed to start containers"
                            docker-compose logs
                            exit 1
                        }

                        # Wait for containers
                        echo "Waiting for containers to be healthy..."
                        sleep 30

                        # Check container status
                        if ! docker-compose ps | grep -q "Up"; then
                            echo "Containers failed to start properly"
                            docker-compose logs
                            exit 1
                        fi

                        # Print container status
                        echo "Container status:"
                        docker-compose ps

                        echo "Deployment completed successfully!"
ENDSSH
                '''
            }
        }
    }
}